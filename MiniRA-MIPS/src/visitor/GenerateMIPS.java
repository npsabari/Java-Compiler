//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import javax.swing.plaf.basic.BasicTabbedPaneUI.TabbedPaneLayout;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GenerateMIPS<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	private String register = "";
	private static String tabSpace = "\t";
	private String simpleRet = "";
	private String label = "";
	private String movReg = "";
	private Integer num = 0;
	private Integer offset = 0;
	private Integer numArgs = 0;
	private boolean movFlag = false;
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
	   R _ret = null;
      if ( n.present() ){
         _ret = n.node.accept(this);
         System.out.println(label+":");
         return _ret;
      }
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( Procedure() )*
    * f13 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      int a = Integer.parseInt(n.f5.f0.tokenImage);
      int b = Integer.parseInt(n.f8.f0.tokenImage);
      int number = a*4 + (b>4 ? b-4 : 0)*4 + 4;
      numArgs = Integer.parseInt(n.f2.f0.tokenImage);
      numArgs = (numArgs>4 ? numArgs-4 : 0);
      System.out.println(tabSpace+".text");
      System.out.println(tabSpace+".globl"+tabSpace+"main");
      System.out.println("main:");
      System.out.println(tabSpace+"move $fp, $sp");
      System.out.println(tabSpace+"subu $sp, $sp, "+ number );
      System.out.println(tabSpace+"sw $ra, -4($fp)");
      offset = (b>4 ? b-4 : 0)*4;
      n.f10.accept(this);
      n.f11.accept(this);
      System.out.println(tabSpace+"lw $ra, -4($fp)");
      System.out.println(tabSpace+"addu $sp, $sp, "+number);
      System.out.println(tabSpace+"j $ra");
      n.f12.accept(this);
      n.f13.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    */
   public R visit(Procedure n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      int a = Integer.parseInt(n.f5.f0.tokenImage);
      int b = Integer.parseInt(n.f8.f0.tokenImage);
      int number = a*4 + (b>4 ? b-4 : 0)*4 + 8;
      numArgs = Integer.parseInt(n.f2.f0.tokenImage);
      numArgs = (numArgs>4 ? numArgs-4 : 0);
      System.out.println(tabSpace+".text");
      System.out.println(tabSpace+".globl"+tabSpace+" "+n.f0.f0.tokenImage);
      System.out.println(n.f0.f0.tokenImage+":");
      System.out.println(tabSpace+"sw $fp, -8($sp)");
      System.out.println(tabSpace+"move $fp, $sp");
      System.out.println(tabSpace+"subu $sp, $sp, "+number);
      System.out.println(tabSpace+"sw $ra, -4($fp)");
      offset = (b>4 ? b-4 : 0)*4;
      n.f10.accept(this);
      n.f11.accept(this);
      System.out.println(tabSpace+"lw $ra, -4($fp)");
      System.out.println(tabSpace+"lw $fp, "+(number-8)+"($sp)");
      System.out.println(tabSpace+"addu $sp, $sp, "+number);
      System.out.println(tabSpace+"j $ra");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println(tabSpace+"nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("li $v0, 4");
      System.out.println(tabSpace+"la $a0, str_er");
      System.out.println(tabSpace+"syscall");
      System.out.println(tabSpace+"li $v0, 10");
      System.out.println(tabSpace+"syscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.println(tabSpace+"beqz "+register+" "+n.f2.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      System.out.println(tabSpace+"b "+n.f1.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String reg1 = register;
      n.f2.accept(this);
      n.f3.accept(this);
      System.out.println(tabSpace+"sw "+register+", "+n.f2.f0.tokenImage+"("+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String reg1 = register;
      n.f2.accept(this);
      n.f3.accept(this);
      System.out.println(tabSpace+"lw "+reg1+" "+n.f3.f0.tokenImage+"("+register+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      movReg = register; 
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      System.out.println(tabSpace+"move $a0 "+simpleRet);
      System.out.println(tabSpace+"jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(num < numArgs)
    	  System.out.println(tabSpace+"lw "+register+", "+(num*4)+"($fp)");
      else
    	  System.out.println(tabSpace+"lw "+register+", "+(num*4 + offset)+ "($sp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(num < numArgs)
    	  System.out.println(tabSpace+"sw "+register+", "+(num*4)+"($fp)");
      else
    	  System.out.println(tabSpace+"sw "+register+", "+(num*4 + offset)+ "($sp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.println(tabSpace+"sw "+register+", "+(num-1)*4+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      System.out.println(tabSpace+"jalr "+simpleRet);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      if(n.f0.which == 2)
    	  movFlag = true;
      n.f0.accept(this);
      movFlag = false;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      switch(n.f1.f0.which){
      case 0:	System.out.println(tabSpace+"move $a0 "+simpleRet);break;
      case 1:	System.out.println(tabSpace+"li $a0 "+simpleRet);break;
      case 2:	System.out.println(tabSpace+"la $a0 "+simpleRet);
      }
      System.out.println(tabSpace+"jal _halloc");
      System.out.println(tabSpace+"move "+movReg+" $v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      String reg1 = register;
      n.f2.accept(this);
      switch(n.f0.f0.which){
      case 0:	System.out.println(tabSpace+"slt "+movReg+", "+reg1+", "+simpleRet);break;
      case 1:	System.out.println(tabSpace+"add "+movReg+", "+reg1+", "+simpleRet);break;
      case 2:	System.out.println(tabSpace+"sub "+movReg+", "+reg1+", "+simpleRet);break;
      case 3:	System.out.println(tabSpace+"mul "+movReg+", "+reg1+", "+simpleRet);
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;	
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      n.f0.accept(this);
      switch(n.f0.which){
      case 0:	simpleRet = register;
      			if(movFlag)
      				System.out.println(tabSpace+"move "+movReg+" "+simpleRet);
      			break;
      case 1:	simpleRet = ""+num;
      			if(movFlag)
      				System.out.println(tabSpace+"li "+movReg+" "+simpleRet);
      			break;
      case 2:	simpleRet = label;
      			if(movFlag)
      				System.out.println(tabSpace+"la "+movReg+" "+simpleRet);
      }
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n) {
      R _ret=null;
      n.f0.accept(this);
      if(n.f0.which <= 3)
    	  register = "$a"+n.f0.which;
      else if(n.f0.which <= 11)
    	  register = "$t"+(n.f0.which-4);
      else if(n.f0.which <= 19)
    	  register = "$s"+(n.f0.which-12);
      else if(n.f0.which <= 21)
    	  register = "$t"+(n.f0.which-20+8);
      else
    	  register = "$v"+(n.f0.which-22);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      num = Integer.parseInt(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      label = n.f0.tokenImage;
      return _ret;
   }
   
   public static void mandatoryPrint(){
	  System.out.println(tabSpace+".text");
	  System.out.println(tabSpace+".globl _halloc");
	  System.out.println("_halloc:");
	  System.out.println(tabSpace+"li $v0, 9");
	  System.out.println(tabSpace+"syscall");
	  System.out.println(tabSpace+"j $ra");
	  
	  System.out.println(tabSpace+".text");
	  System.out.println(tabSpace+".globl _print");
	  System.out.println("_print:");
	  System.out.println(tabSpace+"li $v0, 1");
	  System.out.println(tabSpace+"syscall");
	  System.out.println(tabSpace+"la $a0, newl");
	  System.out.println(tabSpace+"li $v0, 4");
	  System.out.println(tabSpace+"syscall");
	  System.out.println(tabSpace+"j $ra");
	  
	  System.out.println(tabSpace+".data");
	  System.out.println(tabSpace+".align 0");
	  System.out.println("newl:");
	  System.out.println(tabSpace+".asciiz \"\\n\"");
	  System.out.println(tabSpace+".data");
	  System.out.println(tabSpace+".align 0");
	  
	  System.out.println("str_er:");
	  System.out.println(tabSpace+".asciiz \" ERROR: abnormal termination\\n\"");
   }
   
}

