//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import dataStructures.ProcedureClass;
import dataStructures.TempClass;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class PrintMiniRA<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	private ProcedureClass curProcedure = null;
	
	private ArrayList<TempClass> tempSeen = ConstructCFG.tempSeen;
	private HashMap<String, ProcedureClass> procMap = ConstructCFG.procMap;
	
	private boolean doSpilled = false, arg = false, simExp = false, jumpSt = false, callSimp = false;
	private final int extra = 1;
	private String callString = "", strng = "";
	
	private Stack<String> expRet = new Stack<String>();
	private Stack<String> tempStack = new Stack<String>();
	private Stack<String> simExpRet = new Stack<String>();
	private Stack<String> labelStack = new Stack<String>();

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            if(arg){
            	String tmp = tempStack.pop();
            	if(_count < 4)
            		System.out.println("MOVE a"+_count+" "+tmp);
            	else{
            		System.out.println("PASSARG "+ (_count-3) +" "+ tmp);
            	}
            }
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() ){
    	  jumpSt = true;
    	  R _ret = n.node.accept(this);
    	  jumpSt = false;
    	  System.out.println(labelStack.pop()+" NOOP");
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      curProcedure = procMap.get("MAIN");
      System.out.println("MAIN ["+ curProcedure.numArgs +"][" + (curProcedure.numExtraMem+extra) + "][" + (curProcedure.maxCallArgs+extra) + "]");
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.println("END");
      curProcedure = null;
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      n.f0.accept(this);
      curProcedure = procMap.get(labelStack.pop());
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      System.out.println(curProcedure.name +" ["+ curProcedure.numArgs +"][" + (curProcedure.numExtraMem+extra) + "][" + (curProcedure.maxCallArgs+extra) + "]");
      n.f4.accept(this);
      curProcedure = null;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      int num = Integer.parseInt(n.f1.f1.f0.tokenImage);
      TempClass tmpTemp = findTemp(num);
      if(tmpTemp.RegType != 'a')
    	  System.out.print("CJUMP "+(tmpTemp.RegType+""+tmpTemp.RegNum)+" ");
      else{
    	  System.out.println("ALOAD v1 SPILLEDARG "+tmpTemp.RegNum);
    	  System.out.print("CJUMP v1 ");
      }
      jumpSt = true;
      n.f2.accept(this);
      jumpSt = false;
      System.out.println(labelStack.pop());
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      jumpSt = true;
      n.f1.accept(this);
      jumpSt = false;
      System.out.println("JUMP "+ labelStack.pop());
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      int num = Integer.parseInt(n.f1.f1.f0.tokenImage);
      TempClass tmp = findTemp(num);
      boolean flag1 = false, flag2 = false;
      if(tmp.RegType == 'a'){
    	  System.out.println("ALOAD v0 SPILLEDARG "+tmp.RegNum);
    	  flag1 = true;
      }
      n.f2.accept(this);
      n.f3.accept(this);
      num = Integer.parseInt(n.f3.f1.f0.tokenImage);
      TempClass tmp1 = findTemp(num);
      if(tmp1.RegType == 'a'){
    	  System.out.println("ALOAD v1 SPILLEDARG "+tmp1.RegNum);
    	  flag2 = true;
      }
      System.out.println("HSTORE "+ (flag1 ? "v0" : (tmp.RegType+""+tmp.RegNum)) + " " + n.f2.f0.tokenImage + " " + (flag2 ? "v1" : ( tmp1.RegType+""+tmp1.RegNum)) );
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      int num = Integer.parseInt(n.f1.f1.f0.tokenImage);
      TempClass tmp = findTemp(num);
      boolean flag1 = false, flag2 = false;
      if(tmp.RegType == 'a'){
    	  flag1 = true;
      }
      n.f2.accept(this);
      num = Integer.parseInt(n.f2.f1.f0.tokenImage);
      TempClass tmp1 = findTemp(num);
      if(tmp1.RegType == 'a'){
    	  System.out.println("ALOAD v1 SPILLEDARG "+tmp1.RegNum);
    	  flag2 = true;
      }
      n.f3.accept(this);
      System.out.println("HLOAD "+ (flag1 ? "v0" : (tmp.RegType+""+tmp.RegNum)) + " " + (flag2 ? "v1" : ( tmp1.RegType+""+tmp1.RegNum)) + " "+n.f3.f0.tokenImage);
      if(flag1)
    	  System.out.println("ASTORE SPILLEDARG "+ tmp.RegNum + " v0");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      int num = Integer.parseInt(n.f1.f1.f0.tokenImage);
      TempClass tmp = findTemp(num);
      boolean flag = false;
      if(tmp.RegType == 'a')
    	  flag = true;
      n.f2.accept(this);
      System.out.println("MOVE "+ (flag ? "v0" : (tmp.RegType+""+tmp.RegNum)) + " " + expRet.pop());
      if(flag)
    	  System.out.println("ASTORE SPILLEDARG "+ tmp.RegNum + " v0");
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      System.out.println("PRINT "+ simExpRet.pop());
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
      n.f0.accept(this);
      if(n.f0.which == 3)
    	  expRet.push(simExpRet.pop());
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      n.f0.accept(this);
      int cnt = curProcedure.numArgs > 4 ? curProcedure.numArgs-4 : 0;
      for( int i = 0; i < curProcedure.noSregs; ++i, ++cnt )
    	  System.out.println("ASTORE SPILLEDARG "+cnt+" s"+i);
      for(int i = 0; i < curProcedure.numArgs; ++i){
    	  TempClass tmp = findTemp(i);
    	  if(tmp == null){
    		  continue;
    	  }
    	  if(i < 4){
    		  if(tmp.RegType != 'a')
    			  System.out.println("MOVE "+ (tmp.RegType+""+tmp.RegNum)+" a"+i );
    		  else
    			  System.out.println("ASTORE SPILLEDARG "+tmp.RegNum+" a"+i);
    	  }
    	  else{
    		  if(tmp.RegType != 'a')
    			  System.out.println("ALOAD "+(tmp.RegType+""+tmp.RegNum)+" SPILLEDARG "+(i-4));
    		  else{
    			  System.out.println("ALOAD v0 SPILLEDARG "+ (i-4) );
    			  System.out.println("ASTORE SPILLEDARG "+tmp.RegNum+" v0");
    		  }
    		  
    	  }
      }
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      System.out.println("MOVE v0 "+simExpRet.pop());
      n.f4.accept(this);
      cnt = curProcedure.numArgs > 4 ? curProcedure.numArgs-4 : 0;
      for( int i = 0; i < curProcedure.noSregs; ++i, ++cnt)
    	  System.out.println("ALOAD s"+i+" SPILLEDARG "+cnt);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      n.f0.accept(this);
      int cnt = (!curProcedure.name.equals("MAIN") ? curProcedure.noSregs : 0) + (curProcedure.numArgs > 4 ? curProcedure.numArgs-4 : 0);
      for( int i = 0; i < curProcedure.noTregs; ++i, ++cnt)
    	  System.out.println("ASTORE SPILLEDARG "+cnt+" t"+i);
      doSpilled = callSimp = true;
      n.f1.accept(this);
      doSpilled = callSimp = false;
      n.f2.accept(this);
      doSpilled = arg = true;
      n.f3.accept(this);
      doSpilled =  arg = false;
      n.f4.accept(this);
      System.out.println(callString);
      System.out.println("CALL "+simExpRet.pop());
      expRet.push("v0");
      cnt = (!curProcedure.name.equals("MAIN") ? curProcedure.noSregs : 0) + (curProcedure.numArgs > 4 ? curProcedure.numArgs-4 : 0);
      for( int i = 0; i < curProcedure.noTregs; ++i, ++cnt)
    	  System.out.println("ALOAD t"+i+" SPILLEDARG "+cnt);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      expRet.push("HALLOCATE "+simExpRet.pop());
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      int num = Integer.parseInt(n.f1.f1.f0.tokenImage);
      TempClass tmp = findTemp(num);
      boolean flag = false;
      if(tmp.RegType == 'a'){
    	  System.out.println("ALOAD v1 SPILLEDARG "+tmp.RegNum);
    	  flag = true;
      }
      String str = "";
      switch(n.f0.f0.which){
      case 0: str += "LT ";
      break;
      case 1: str += "PLUS ";
      break;
      case 2: str += "MINUS ";
      break;
      case 3: str += "TIMES ";
      break;
      }
      n.f2.accept(this);
      expRet.push(str+ (flag ? "v1" : (tmp.RegType+""+tmp.RegNum))+ " "+simExpRet.pop() );
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      simExp = true;
      if(n.f0.which == 0)
    	  doSpilled = true;
      n.f0.accept(this);
      doSpilled = false;
      simExp = false;
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      if(doSpilled){
    	  int num = Integer.parseInt(n.f1.f0.tokenImage);
    	  TempClass tmp = findTemp(num);
    	  if(tmp.RegType == 'a'){
    		  if(!callSimp)
    			  System.out.println("ALOAD v0 SPILLEDARG "+tmp.RegNum);
    		  else
    			  callString = "ALOAD v0 SPILLEDARG "+tmp.RegNum;
    		  if(simExp)
    			  simExpRet.push("v0");
    		  if(arg)
    			  tempStack.push("v0");
    	  }
    	  else{
    		  if(simExp)
    			  simExpRet.push(""+(tmp.RegType+""+tmp.RegNum));
    		  if(arg)
    			  tempStack.push(""+(tmp.RegType+""+tmp.RegNum));
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      if(simExp)
    	  simExpRet.push(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      String str = "";
      if(curProcedure != null && jumpSt)
    	  str += curProcedure.name;
      labelStack.push(n.f0.tokenImage+str);
      if(simExp)
    	  simExpRet.push(n.f0.tokenImage+str);
      return _ret;
   }
   
   
   // My Functions
   
   private TempClass findTemp(int num){
	   for( TempClass i : tempSeen){
		   if(i.parentProc == curProcedure.name && i.tmpNumber == num)
			   return i;
	   }
	   return null;
   }
   
   /**
    * Debugging statments
    */
   /*
   public static void print(){
	   for( TempClass i :  ConstructCFG.tempSeen){
		   if(i.tmpNumber == 0 && i.parentProc == "BBS_Init"){
			   System.out.println("LiveIn "+i.start+" end: "+i.end +" reg :" + (i.RegType+""+i.RegNum));
			   System.out.println(ConstructCFG.procMap.get(i.parentProc).lineStrt +" "+ConstructCFG.procMap.get(i.parentProc).lineEnd );
		   }
		   if(i.tmpNumber == 141 && i.parentProc == "BBS_Init"){
			   System.out.println("LiveIn "+i.start+" end: "+i.end +" reg :" + (i.RegType+""+i.RegNum));
		   }
	   }
   }
   */
   
}
