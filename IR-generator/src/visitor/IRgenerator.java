//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

import symbolTableClasses.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class IRgenerator<R> implements GJNoArguVisitor<R> {
	
	public static HashMap<String, ClassNode> ClassStoreBackup;
	public static int curInd;
	
	ClassNode currentClass = null;
	MethodNode currentMethod = null;
	
	int newLineFlag = 0, labelIndex = 0;
	
	Stack<Integer> labelNumStack = new Stack<Integer>();
	Stack<Integer> indexes = new Stack<Integer>();
	
	boolean IdPrintFlag = false, SendMsgFlag = false, typeGlobalFlag = false;
	
	String pexpType = "", expType = "";;
	String objToken = "";
	int expNum = 0;
	
	// My functions
	private String getTempString( String var ) {
		if( currentMethod != null ) {
		   typeGlobalFlag = false;
		   if( currentMethod.localVarMap.containsKey(var))
			   return "TEMP " + currentMethod.localVarMap.get(var).index;
		   else if( currentMethod.paramMap.containsKey(var))
			   return "TEMP " + currentMethod.paramMap.get(var).index;
	   }
	   typeGlobalFlag = true;
	   if( currentClass != null && currentClass.varlst.indexOf(var) != -1 ){
		   if(expNum == 0) 
			   return "TEMP 0 " + 4*(1+currentClass.varlst.indexOf(var));
		   else {
			   curInd++;
			   return "BEGIN\n HLOAD TEMP " + (curInd-1) + " TEMP 0 " + 4*(1+currentClass.varlst.indexOf(var)) + "\n RETURN\n TEMP " + (curInd-1) + "\nEND\n";
		   }
	   }
	   return "";
   }
	   
   public String getIdType( String id ) {
	   if(currentMethod != null) {
		   if(currentMethod.localVarMap.containsKey(id)) 
			   return currentMethod.localVarMap.get(id).varType;
		   else if(currentMethod.paramMap.containsKey(id)) 
			   return currentMethod.paramMap.get(id).varType;

		   else if( SendMsgFlag ) {
			   for( ClassNode aClass : ClassStoreBackup.values() )
				   if(aClass.memMap.containsKey(id))
					   return aClass.memMap.get(id).returnType;
		   }
		   else if(currentClass != null) {
			   if(currentClass.varMap.containsKey(id)) return currentClass.varMap.get(id).varType;
			   else if(currentClass.memMap.containsKey(id));
		   }
	   }
	   return null;
   }
	
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);	
      System.out.print("MAIN\n ");
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);	
      System.out.print("END\n \n ");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      currentClass = ClassStoreBackup.get(n.f1.f0.tokenImage);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      currentClass = ClassStoreBackup.get(n.f1.f0.tokenImage);
      n.f5.accept(this);
      n.f6.accept(this);	
      n.f7.accept(this);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      currentMethod = currentClass.memMap.get(n.f2.f0.tokenImage);
      n.f4.accept(this);	
      System.out.println(currentClass.className + "_" + currentMethod.functionName + " [" + (currentMethod.paramMap.size()+1) + "]\n");
      n.f5.accept(this);
      n.f6.accept(this);
      System.out.print("BEGIN\n ");
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      IdPrintFlag = true;
      System.out.print("RETURN\n "); 
      n.f10.accept(this);
      IdPrintFlag = false;
      n.f11.accept(this);
      n.f12.accept(this);
      currentMethod = null;
      System.out.print("END\n \n \n ");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      IdPrintFlag = true;
      getTempString(n.f0.f0.tokenImage);
      System.out.print(typeGlobalFlag ? "HSTORE " : "MOVE ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);	
      IdPrintFlag = false;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      IdPrintFlag = true;
      System.out.print("HSTORE PLUS ");
      expNum++;
      n.f0.accept(this); 	
      --expNum;
      n.f1.accept(this);	
      newLineFlag++; 
      System.out.print("TIMES 4 ");
      n.f2.accept(this);
      n.f3.accept(this);	
      System.out.println(" 4");
      n.f4.accept(this);
      n.f5.accept(this);	
      --newLineFlag;
      n.f6.accept(this);	
      IdPrintFlag = false; 
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      IdPrintFlag = true;
      labelNumStack.push(labelIndex);
      labelIndex += 2;
      n.f0.accept(this);	
      System.out.print("CJUMP ");
      n.f1.accept(this);	
      newLineFlag++;
      n.f2.accept(this);	
      newLineFlag--;
      n.f3.accept(this);	
      System.out.print("L" + (labelNumStack.peek()+1) + "\n ");
      n.f4.accept(this);	
      System.out.print("JUMP L" + labelNumStack.peek() + "\n ");
      n.f5.accept(this);	
      System.out.print("L" + (labelNumStack.peek()+1) + " NOOP\n ");
      n.f6.accept(this);
      System.out.print("L" + labelNumStack.peek() + " NOOP\n ");
      labelNumStack.pop();
      IdPrintFlag = false;
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      labelNumStack.push(labelIndex);
      labelIndex += 2;
      IdPrintFlag = true;
      n.f0.accept(this);	
      System.out.print("L" + (labelNumStack.peek()+1) + " NOOP\n CJUMP ");
      n.f1.accept(this);	
      newLineFlag++;
      n.f2.accept(this);	
      newLineFlag--;
      n.f3.accept(this);	
      System.out.print("L" + labelNumStack.peek() + " NOOP\n ");
      n.f4.accept(this);	
      System.out.print("JUMP L" + (labelNumStack.peek()+1) +"\n ");
      System.out.print("L" + labelNumStack.peek() + " NOOP\n ");
      labelNumStack.pop();
      IdPrintFlag = false;
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      IdPrintFlag = true;
      n.f0.accept(this);
      n.f1.accept(this);	
      System.out.print("PRINT ");
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      IdPrintFlag = false;
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      expNum++;
      n.f0.accept(this); 
      if(newLineFlag==0) 
    	  System.out.println();
      if(n.f0.which == 8) 
    	  expType = pexpType;
      expNum--;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      labelNumStack.push(labelIndex);
      indexes.push(curInd);
      curInd++;
      labelIndex += 2;
      System.out.print("BEGIN CJUMP LT PLUS ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.print("2 L" + labelNumStack.peek() + " NOOP\n ");
      System.out.print("MOVE TEMP " + indexes.peek() + " 0\n JUMP L" + (labelNumStack.peek()+1) + "\n ");
      System.out.print("L" + labelNumStack.peek() + " MOVE TEMP " + indexes.peek() + " 1\n");
      System.out.print("L" + (labelNumStack.peek()+1) + " NOOP\n");
      System.out.print(" RETURN\n TEMP " + indexes.peek() + "\nEND\n");
      expType = "boolean";
      labelNumStack.pop();
      indexes.pop();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      System.out.print("LT ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      expType = "boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
  	  System.out.print("PLUS ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
  	  System.out.print("MINUS ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      System.out.print("TIMES ");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      indexes.push(curInd);
      curInd+=2;
      System.out.print("BEGIN\n HLOAD TEMP " + (indexes.peek()) + " PLUS\n");
      n.f0.accept(this);
      n.f1.accept(this);	
      System.out.print("BEGIN\n MOVE TEMP " + (indexes.peek()+1) + " TIMES 4 ");
      n.f2.accept(this);
      n.f3.accept(this);	
      System.out.print("\n RETURN\n TEMP " + (indexes.peek()+1) + "\nEND\n 4\n RETURN\n TEMP " + (indexes.peek()) + "\nEND\n ");
      indexes.pop();
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      indexes.push(curInd);
      curInd += 2;
      System.out.print("BEGIN\n MOVE TEMP " + (indexes.peek()) + " ");
      n.f0.accept(this);	
      System.out.print("HLOAD TEMP " + (indexes.peek()+1) + " TEMP " + (indexes.peek()) + " 0");
      n.f1.accept(this);
      System.out.print("\n RETURN\n TEMP " + (indexes.peek()+1) + "\nEND\n");
      n.f2.accept(this);
      expType = "int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      indexes.push(curInd);
      curInd += 3;
      System.out.print("CALL \nBEGIN \n MOVE TEMP " + (indexes.peek()) + " ");
      n.f0.accept(this);	
      ClassNode tempClass = ClassStoreBackup.get(pexpType);
      n.f1.accept(this);	
	  System.out.print("\n HLOAD TEMP " + (indexes.peek()+1) + " TEMP " + (indexes.peek()) + " 0\n ");
	  SendMsgFlag = true;
      n.f2.accept(this);
      System.out.print("HLOAD TEMP " + (indexes.peek()+2) + " TEMP " + (indexes.peek()+1) + " " + 4*tempClass.memlst.indexOf(n.f2.f0.tokenImage) + "\n ");
      System.out.print("RETURN\n " + "TEMP " + (indexes.peek()+2) + "\n " + "END\n ");
      SendMsgFlag = false;
      n.f3.accept(this);
      System.out.print("( TEMP " + indexes.peek() + " ");
      n.f4.accept(this);
      n.f5.accept(this);
      System.out.print(")\n ");
      expType = tempClass.memMap.get(n.f2.f0.tokenImage).returnType;
      indexes.pop();
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      newLineFlag++;
      n.f0.accept(this);
      n.f1.accept(this);
      newLineFlag--;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);	
      System.out.print(n.f0.tokenImage + " "); 
      pexpType = "int";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);	
      System.out.print("1 "); 
      pexpType = "boolean";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);	
      System.out.print("0 "); 
      pexpType = "boolean";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      R _ret=null;
      n.f0.accept(this);	
      if(IdPrintFlag) 
    	  System.out.print(getTempString(n.f0.tokenImage) + " ");
      pexpType = getIdType(n.f0.tokenImage);
      if(SendMsgFlag) 
    	  objToken = getTempString(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      pexpType = currentClass.className;
      System.out.print("TEMP 0" + "\n ");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      indexes.push(curInd);
      labelNumStack.push(labelIndex);
      curInd+=2;
      labelIndex += 2;
      n.f0.accept(this);
      n.f1.accept(this);
      newLineFlag++;
      n.f2.accept(this);
      System.out.print("BEGIN\n MOVE TEMP " + (indexes.peek()) + " ");
      n.f3.accept(this);
      System.out.print("\n MOVE TEMP " + (indexes.peek()+1) + " HALLOCATE TIMES 4 PLUS TEMP " + (indexes.peek()) + " 1");
      System.out.print("\n HSTORE TEMP " + (indexes.peek()+1) + " 0 TEMP " + (indexes.peek()));
      System.out.print("\n L" + labelNumStack.peek() + " CJUMP LT 0 TEMP " + indexes.peek() + " L" + (labelNumStack.peek()+1) + " NOOP");
      System.out.print("\n HSTORE PLUS TEMP " + (indexes.peek()+1) + " TIMES 4 TEMP " + indexes.peek() + " 0 0");
      System.out.print("\n MOVE TEMP " + indexes.peek() + " MINUS TEMP " + indexes.peek() + " 1");
      System.out.print("\n JUMP L" + labelNumStack.peek());
      System.out.print("\n L" + (labelNumStack.peek()+1) + " NOOP\n RETURN\n TEMP " + (indexes.peek()+1) + "\nEND\n");
      n.f4.accept(this); 
      labelNumStack.pop();
      indexes.pop();
      pexpType = "array";	
      --newLineFlag;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      indexes.push(curInd);
      curInd+=2;
      n.f0.accept(this);	
      objToken = "\nBEGIN\n ";
      n.f1.accept(this);	
      objToken += "MOVE TEMP " + (indexes.peek()) + " HALLOCATE " + 4*ClassStoreBackup.get(n.f1.f0.tokenImage).memlst.size() + "\n ";
      n.f2.accept(this);	
      objToken += "MOVE TEMP " + (indexes.peek()+1) + " HALLOCATE " + 4*(1+(ClassStoreBackup.get(n.f1.f0.tokenImage).varMap).size()) + "\n ";
      n.f3.accept(this);	
      int i = 0;
      for( String setOffsetForMethod : ClassStoreBackup.get(n.f1.f0.tokenImage).memlst ) {
    	  objToken += "HSTORE TEMP " + indexes.peek() + " " + 4*i + " " + ClassStoreBackup.get(n.f1.f0.tokenImage).memMap.get(setOffsetForMethod).enclClass + "_" + setOffsetForMethod + "\n ";
    	  ++i;
      }
      objToken += "HSTORE TEMP " + (indexes.peek()+1) + " 0 TEMP " + indexes.peek() + "\n ";
      objToken += "RETURN\n  TEMP " + (indexes.peek()+1) + "\nEND\n \n ";
      System.out.print(objToken + "\n ");
      indexes.pop();
      pexpType = n.f1.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);	
      System.out.print("MINUS 1 ");
      n.f1.accept(this);
      pexpType = "boolean";
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);	
      newLineFlag++;
      n.f1.accept(this);
      n.f2.accept(this);	
      newLineFlag--;
      pexpType = expType;
      return _ret;
   }
}