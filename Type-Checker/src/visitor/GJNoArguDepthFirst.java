//

// Generated by JTB 1.3.2
//

package visitor;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

import symbolTableClasses.ClassNode;
import symbolTableClasses.IdClass;
import symbolTableClasses.MethodNode;
import syntaxtree.AllocationExpression;
import syntaxtree.AndExpression;
import syntaxtree.ArrayAllocationExpression;
import syntaxtree.ArrayAssignmentStatement;
import syntaxtree.ArrayLength;
import syntaxtree.ArrayLookup;
import syntaxtree.ArrayType;
import syntaxtree.AssignmentStatement;
import syntaxtree.Block;
import syntaxtree.BooleanType;
import syntaxtree.BracketExpression;
import syntaxtree.ClassDeclaration;
import syntaxtree.ClassExtendsDeclaration;
import syntaxtree.CompareExpression;
import syntaxtree.Expression;
import syntaxtree.ExpressionList;
import syntaxtree.ExpressionRest;
import syntaxtree.FalseLiteral;
import syntaxtree.FormalParameter;
import syntaxtree.FormalParameterList;
import syntaxtree.FormalParameterRest;
import syntaxtree.Goal;
import syntaxtree.Identifier;
import syntaxtree.IfStatement;
import syntaxtree.IntegerLiteral;
import syntaxtree.IntegerType;
import syntaxtree.MainClass;
import syntaxtree.MessageSend;
import syntaxtree.MethodDeclaration;
import syntaxtree.MinusExpression;
import syntaxtree.Node;
import syntaxtree.NodeList;
import syntaxtree.NodeListOptional;
import syntaxtree.NodeOptional;
import syntaxtree.NodeSequence;
import syntaxtree.NodeToken;
import syntaxtree.NotExpression;
import syntaxtree.PlusExpression;
import syntaxtree.PrimaryExpression;
import syntaxtree.PrintStatement;
import syntaxtree.Statement;
import syntaxtree.ThisExpression;
import syntaxtree.TimesExpression;
import syntaxtree.TrueLiteral;
import syntaxtree.Type;
import syntaxtree.TypeDeclaration;
import syntaxtree.VarDeclaration;
import syntaxtree.WhileStatement;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	
	public ArrayList<ClassNode> SymbolTable = new ArrayList<ClassNode>();
	public Map<String, ClassNode> ClassMap = new HashMap<String,ClassNode>();
	public Stack<MethodNode> funtemp = new Stack<MethodNode>();
	public Stack<IdClass> vartemp = new Stack<IdClass>();
	public String Idtype;
	public boolean ref, arr;
	public ClassNode currentClass = null;
	public MethodNode currentMethod = null;
	
   public R visit(NodeList n) {
	  R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }
   
   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if( CheckInheritance() ){
    	  //System.out.println("There is Infinit Loop in inheritance");
    	  System.out.print("Type error");
    	  System.exit(0);
      }
//      System.out.println(SymbolTable);
      TypeChecker.ClassMapBackup = ClassMap;
      TypeChecker.SymbolTableBackup = SymbolTable;
      return _ret;
   }

/**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);
      ClassNode mainClass = new ClassNode();
      SymbolTable.add(mainClass);
      n.f1.accept(this);
      mainClass.className = n.f1.f0.tokenImage;
      ClassMap.put(mainClass.className, mainClass);
      n.f2.accept(this);
      n.f3.accept(this);
      MethodNode mainfunc = new MethodNode();
      mainClass.noMemberFunctions++;
      n.f4.accept(this);
      n.f5.accept(this);
      mainfunc.returnType = new IdClass("void",null);
      n.f6.accept(this);
      mainfunc.functionName = "main";
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      IdClass tmp = new IdClass("String", n.f11.f0.tokenImage);
      tmp.arrornot = true;
      mainfunc.paramStore.add(tmp);
      mainClass.memMap.put(mainfunc.functionName, mainfunc);
      mainClass.memFunctions.add(mainfunc);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      ClassNode varClass = new ClassNode();
      n.f1.accept(this);
      varClass.className = n.f1.f0.tokenImage;
      if( ClassMap.containsKey(varClass.className)){
    	  //System.out.println("The class "+ varClass.className+" is declared Twice");
    	  System.out.print("Type error");
    	  System.exit(0);
      }
      SymbolTable.add(varClass);
      currentClass = varClass;
      ClassMap.put(varClass.className, varClass);
      n.f2.accept(this);
      n.f3.accept(this);
      while(!vartemp.empty()){
    	  varClass.varStore.add( vartemp.pop());
    	  varClass.noMemberVariables++;
      }
      n.f4.accept(this);
      while(!funtemp.empty()){
    	  varClass.memFunctions.add( funtemp.pop());
    	  varClass.noMemberFunctions++;
   	  }
      n.f5.accept(this);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      ClassNode varClass = new ClassNode();
      n.f1.accept(this);
      varClass.className = n.f1.f0.tokenImage;
      if( ClassMap.containsKey(varClass.className)){
//    	  System.out.println("The class "+ varClass.className+" is declared Twice");
    	  System.out.print("Type error");
    	  System.exit(0);
      }
      n.f2.accept(this);
      n.f3.accept(this);
      varClass.parentClass = n.f3.f0.tokenImage;
      SymbolTable.add(varClass);
      ClassMap.put(varClass.className, varClass);
      currentClass = varClass;
      n.f4.accept(this);
      n.f5.accept(this);
      while(!vartemp.empty()){
    	  varClass.varStore.add( vartemp.pop());
    	  varClass.noMemberVariables++;
      }
      n.f6.accept(this);
      while(!funtemp.empty()){
    	  varClass.memFunctions.add( funtemp.pop());
    	  varClass.noMemberFunctions++;
   	  }
      n.f7.accept(this);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      String tmpIdtype = Idtype;
      boolean tmpref = ref;
      boolean tmparr = arr;
      n.f1.accept(this);
      n.f2.accept(this);
      String varname = n.f1.f0.tokenImage;
      if( currentMethod != null ){
		if(currentMethod.varMap.containsKey(varname) || currentMethod.paramMap.containsKey(varname)){
//			System.out.println("Variable "+ varname+" is declared Twice in "+ currentMethod.functionName + " Method");
			System.out.print("Type error");
			System.exit(0);
   		}
      }
      else if( currentClass.varMap.containsKey(varname)){
//			System.out.println("Variable "+ varname + " is declared Twice in "+ currentClass.className + " Class");
    	  System.out.print("Type error");
			System.exit(0);
      }
      IdClass Idtmp = new IdClass(tmpref, tmparr, tmpIdtype, varname);
      if(currentMethod != null)
    	  currentMethod.varMap.put(varname, Idtmp);
      else
    	  currentClass.varMap.put(varname, Idtmp);
	  vartemp.push(Idtmp);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      MethodNode varMethod = new MethodNode();
      n.f1.accept(this);
      String tmpreturnType = Idtype;
      boolean tmpref = ref;
      boolean tmparr = arr;
      n.f2.accept(this);
      varMethod.functionName = n.f2.f0.tokenImage;
      if( currentClass != null && currentClass.memMap.containsKey(varMethod.functionName)){
//    	  System.out.println("Function "+ varMethod.functionName + " is declared twice in " + currentClass.className + " class" );
    	  System.out.print("Type error");
    	  System.exit(0);
      }
      currentMethod = varMethod;
      varMethod.enclClass = currentClass.className;
      varMethod.returnType = new IdClass(tmpref, tmparr, tmpreturnType, null );
      n.f3.accept(this);
      n.f4.accept(this);
      while( !vartemp.empty() ){
    	  varMethod.paramStore.add(vartemp.pop());
    	  varMethod.noParams++;
      }
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      while( !vartemp.empty()){
    	  varMethod.varStore.add(vartemp.pop());
    	  varMethod.noFunctionVars++;
      }
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      funtemp.push(varMethod);
      currentClass.memMap.put(varMethod.functionName, varMethod);
      currentMethod = null;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      String tmpIdtype = Idtype;
      boolean tmpref = ref;
      boolean tmparr = arr;
      n.f1.accept(this);
      String varname = n.f1.f0.tokenImage;
      if( currentMethod != null && currentMethod.paramMap.containsKey(varname)){
//    	  System.out.println("The argument "+ varname +" is used Twice in " + currentMethod.functionName + " Function");
    	  System.out.print("Type error");
    	  System.exit(0);
      }
      IdClass Idtmp = new IdClass(tmpref, tmparr, tmpIdtype, varname);
      currentMethod.paramMap.put(varname, Idtmp);
      vartemp.push(Idtmp);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      ref = false;
      arr = true;
      Idtype = "int";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      arr = false;
      ref = false;
      Idtype = "boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      arr = false;
      ref = false;
      Idtype = "int";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n){
      R _ret=null;
      n.f0.accept(this);
      Idtype = n.f0.tokenImage;
      ref = (Idtype.equals("int") || Idtype.equals("boolean")) ? false : true;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }
   
   /**
    * My checker
    */
   	private boolean CheckInheritance() {
		// TODO Auto-generated method stub
   		boolean flag = false;
   		for( ClassNode tmpClass : SymbolTable){
   			flag = false;
   			ArrayList<String> visitedParen = new ArrayList<String>();
   			visitedParen.add(tmpClass.className);
   			while(tmpClass.parentClass != null){
   				if ( ClassMap.containsKey(tmpClass.parentClass) && visitedParen.contains(ClassMap.get(tmpClass.parentClass).parentClass)){
   					flag = true;
   					break;
   				}
   				tmpClass = ClassMap.get(tmpClass.parentClass);
   				visitedParen.add(tmpClass.className);
   			}
   			if(flag)
   				break;
   		}
		return flag;
	}
}